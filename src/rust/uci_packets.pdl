little_endian_packets

enum PacketBoundaryFlag : 1 {
    COMPLETE = 0x00,
    NOT_COMPLETE = 0x01,
}

enum GroupId : 4 {
    CORE = 0x00,
    SESSION_CONFIG = 0x01,
    RANGING_SESSION_CONTROL = 0x02,
    DATA_CONTROL = 0x03,
    TEST = 0x0d,
    ANDROID = 0x0e,
}

enum CoreOpCode : 6 {
    CORE_DEVICE_RESET = 0x00,
    CORE_DEVICE_STATUS_NTF = 0x01,
    CORE_DEVICE_INFO = 0x02,
    CORE_GET_CAPS_INFO = 0x03,
    CORE_SET_CONFIG = 0x04,
    CORE_GET_CONFIG = 0x05,
    CORE_DEVICE_SUSPEND = 0x06,
    CORE_GENERIC_ERROR_NTF = 0x07,
}

enum SessionOpCode : 6 {
    SESSION_INIT = 0x00,
    SESSION_DEINIT = 0x01,
    SESSION_STATUS_NTF = 0x02,
    SESSION_SET_APP_CONFIG = 0x03,
    SESSION_GET_APP_CONFIG = 0x04,
    SESSION_GET_COUNT = 0x05,
    SESSION_GET_STATE = 0x06,
    SESSION_UPDATE_CONTROLLER_MULTICAST_LIST = 0x07,
}

enum RangeOpCode : 6 {
    RANGE_START = 0x00,
    RANGE_STOP = 0x01,
    RANGE_INTERVAL_UPDATE_REQ = 0x02,
    RANGE_GET_RANGING_COUNT = 0x03,
}

enum AppDataOpCode : 6 {
    APP_DATA_TX = 0x00,
    APP_DATA_RX = 0x01,
}

// Android vendor commands
enum AndroidOpCode : 6 {
    ANDROID_GET_POWER_STATS = 0x0, // TODO: Add packet for this.
    ANDROID_SET_COUNTRY_CODE = 0x1,
}

enum StatusCode : 8 {
    // Generic Status Codes
    UCI_STATUS_OK = 0x00,
    UCI_STATUS_REJECTED = 0x01,
    UCI_STATUS_FAILED = 0x02,
    UCI_STATUS_SYNTAX_ERROR = 0x03,
    UCI_STATUS_INVALID_PARAM = 0x04,
    UCI_STATUS_INVALID_RANGE = 0x05,
    UCI_STATUS_INVALID_MSG_SIZE = 0x06,
    UCI_STATUS_UNKNOWN_GID = 0x07,
    UCI_STATUS_UNKNOWN_OID = 0x08,
    UCI_STATUS_READ_ONLY = 0x09,
    UCI_STATUS_COMMAND_RETRY = 0x0A,

    // UWB Session Specific Status Codes
    UCI_STATUS_SESSSION_NOT_EXIST = 0x11,
    UCI_STATUS_SESSSION_DUPLICATE = 0x12,
    UCI_STATUS_SESSSION_ACTIVE = 0x13,
    UCI_STATUS_MAX_SESSSIONS_EXCEEDED = 0x14,
    UCI_STATUS_SESSION_NOT_CONFIGURED = 0x15,

    // UWB Ranging Session Specific Status Codes
    UCI_STATUS_RANGING_TX_FAILED = 0x20,
    UCI_STATUS_RANGING_RX_TIMEOUT = 0x21,
    UCI_STATUS_RANGING_RX_PHY_DEC_FAILED = 0x22,
    UCI_STATUS_RANGING_RX_PHY_TOA_FAILED = 0x23,
    UCI_STATUS_RANGING_RX_PHY_STS_FAILED = 0x24,
    UCI_STATUS_RANGING_RX_MAC_DEC_FAILED = 0x25,
    UCI_STATUS_RANGING_RX_MAC_IE_DEC_FAILED = 0x26,
    UCI_STATUS_RANGING_RX_MAC_IE_MISSING = 0x27,

    // UWB Data Session Specific Status Codes
    UCI_STATUS_DATA_MAX_TX_PSDU_SIZE_EXCEEDED = 0x30,
    UCI_STATUS_DATA_RX_CRC_ERROR = 0x31,
}

enum ResetConfig : 8 {
    UWBS_RESET = 0x00,
}

enum DeviceConfigId : 8 {
    DEVICE_STATE = 0x00,
    LOW_POWER_MODE = 0x01,
}

enum AppConfigId : 8 {
    DEVICE_TYPE = 0x00,
    RANGING_ROUND_USAGE = 0x01,
    STS_CONFIG = 0x02,
    MULTI_NODE_MODE = 0x03,
    CHANNEL_NUMBER = 0x04,
    NO_OF_CONTROLEE = 0x05,
    DEVICE_MAC_ADDRESS = 0x06,
    DST_MAC_ADDRESS = 0x07,
    SLOT_DURATION = 0x08,
    RANGING_INTERVAL = 0x09,
    STS_INDEX = 0x0A,
    MAC_FCS_TYPE = 0x0B,
    RANGING_ROUND_CONTROL = 0x0C,
    AOA_RESULT_REQ = 0x0D,
    RNG_DATA_NTF = 0x0E,
    RNG_DATA_NTF_PROXIMITY_NEAR = 0x0F,
    RNG_DATA_NTF_PROXIMITY_FAR = 0x10,
    DEVICE_ROLE = 0x11,
    RFRAME_CONFIG = 0x12,
    PREAMBLE_CODE_INDEX = 0x14,
    SFD_ID = 0x15,
    PSDU_DATA_RATE = 0x16,
    PREAMBLE_DURATION = 0x17,
    RANGING_TIME_STRUCT = 0x1A,
    SLOTS_PER_RR = 0x1B,
    TX_ADAPTIVE_PAYLOAD_POWER = 0x1C,
    RESPONDER_SLOT_INDEX = 0x1E,
    PRF_MODE = 0x1F,
    SCHEDULED_MODE = 0x22,
    KEY_ROTATION = 0x23,
    KEY_ROTATION_RATE = 0x24,
    SESSION_PRIORITY = 0x25,
    MAC_ADDRESS_MODE = 0x26,
    VENDOR_ID = 0x27,
    STATIC_STS_IV = 0x28,
    NUMBER_OF_STS_SEGMENTS = 0x29,
    MAX_RR_RETRY = 0x2A,
    UWB_INITIATION_TIME = 0x2B,
    HOPPING_MODE = 0x2C,
    BLOCK_STRIDE_LENGTH = 0x2D,
    RESULT_REPORT_CONFIG = 0x2E,
    IN_BAND_TERMINATION_ATTEMPT_COUNT = 0x2F,
    SUB_SESSION_ID = 0x30,
    BPRF_PHR_DATA_RATE = 0x31,
    MAX_NUMBER_OF_MEASUREMENTS = 0x32,
    STS_LENGTH = 0x35,

    // CCC specific
    CCC_RANGING_PROTOCOL_VER = 0xA3,
    CCC_UWB_CONFIG_ID = 0xA4,
    CCC_PULSESHAPE_COMBO = 0xA5,
    CCC_URSK_TTL = 0xA6,
}

enum DeviceState : 8 {
    DEVICE_STATE_READY = 0x01,
    DEVICE_STATE_ACTIVE = 0x02,
    DEVICE_STATE_ERROR = 0xff,
}

enum SessionState : 8 {
    SESSION_STATE_INIT = 0x00,
    SESSION_STATE_DEINIT = 0x01,
    SESSION_STATE_ACTIVE = 0x02,
    SESSION_STATE_IDLE = 0x03,
}

enum ReasonCode : 8 {
    STATE_CHANGE_WITH_SESSION_MANAGEMENT_COMMANDS = 0x00,
    MAX_RANGING_ROUND_RETRY_COUNT_REACHED = 0x01,
    MAX_NUMBER_OF_MEASUREMENTS_REACHED = 0x02,
    ERROR_SLOT_LENGTH_NOT_SUPPORTED = 0x20,
    ERROR_INSUFFICIENT_SLOTS_PER_RR = 0x21,
    ERROR_MAC_ADDRESS_MODE_NOT_SUPPORTED = 0x22,
    ERROR_INVALID_RANGING_INTERVAL = 0x23,
    ERROR_INVALID_STS_CONFIG = 0x24,
    ERROR_INVALID_RFRAME_CONFIG = 0x25,
}

enum MulticastUpdateStatusCode : 8 {
    STATUS_OK_MULTICAST_LIST_UPDATE = 0x00,
    STATUS_ERROR_MULTICAST_LIST_FULL = 0x01,
    STATUS_ERROR_KEY_FETCH_FAIL = 0x02,
    STATUS_ERROR_SUB_SESSION_ID_NOT_FOUND = 0x03,
}

enum MacAddressIndicator : 8 {
    SHORT_ADDRESS = 0x00,
    EXTENDED_ADDRESS = 0x01,
}

enum SessionType: 8 {
    FIRA_RANGING_SESSION = 0x00,
    FIRA_DATA_TRANSFER = 0x01,
    CCC = 0xA0,
}

packet UciCommand {
    _fixed_ = 1 : 3, // message type field
    packet_boundary_flag: PacketBoundaryFlag,
    group_id: GroupId,
    _payload_,
}

packet UciResponse {
    _fixed_ = 2 : 3, // message type field
    packet_boundary_flag: PacketBoundaryFlag,
    group_id: GroupId,
    _payload_,
}

packet UciNotification {
    _fixed_ = 3 : 3, // message type field
    packet_boundary_flag: PacketBoundaryFlag,
    group_id: GroupId,
    _payload_,
}

// TODO(b/202760099): Handle fragmentation of packets if the size exceed max allowed.

packet CoreCommand : UciCommand (packet_boundary_flag = COMPLETE, group_id = CORE) {
    _reserved_: 2,
    core_opcode: CoreOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet CoreResponse : UciResponse (packet_boundary_flag = COMPLETE, group_id = CORE) {
    _reserved_: 2,
    core_opcode: CoreOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet CoreNotification : UciNotification (packet_boundary_flag = COMPLETE, group_id = CORE) {
    _reserved_: 2,
    core_opcode: CoreOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet SessionCommand : UciCommand (packet_boundary_flag = COMPLETE, group_id = SESSION_CONFIG) {
    _reserved_: 2,
    session_opcode: SessionOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet SessionResponse : UciResponse (packet_boundary_flag = COMPLETE, group_id = SESSION_CONFIG) {
    _reserved_: 2,
    session_opcode: SessionOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet SessionNotification : UciNotification (packet_boundary_flag = COMPLETE, group_id = SESSION_CONFIG) {
    _reserved_: 2,
    session_opcode: SessionOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet RangingCommand : UciCommand (packet_boundary_flag = COMPLETE, group_id = RANGING_SESSION_CONTROL) {
    _reserved_: 2,
    ranging_opcode: RangeOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet RangingResponse : UciResponse (packet_boundary_flag = COMPLETE, group_id = RANGING_SESSION_CONTROL) {
    _reserved_: 2,
    ranging_opcode: RangeOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet RangingNotification : UciNotification (packet_boundary_flag = COMPLETE, group_id = RANGING_SESSION_CONTROL) {
    _reserved_: 2,
    ranging_opcode: RangeOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet AndroidCommand : UciCommand (packet_boundary_flag = COMPLETE, group_id = ANDROID) {
    _reserved_: 2,
    android_opcode: AndroidOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet AndroidResponse : UciResponse (packet_boundary_flag = COMPLETE, group_id = ANDROID) {
    _reserved_: 2,
    android_opcode: AndroidOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet AndroidNotification : UciNotification (packet_boundary_flag = COMPLETE, group_id = ANDROID) {
    _reserved_: 2,
    android_opcode: AndroidOpCode,
    _reserved_: 8,
    _size_(_payload_): 8,
    _payload_,
}

packet GetDeviceInfoCmd : CoreCommand (core_opcode = CORE_DEVICE_INFO) {
}

test GetDeviceInfoCmd {
    "\x01\x08\x00\x00",
}

packet GetDeviceInfoRsp : CoreResponse (core_opcode = CORE_DEVICE_INFO) {
    status: StatusCode,
    uci_version: 16,
    mac_version: 16,
    phy_version: 16,
    uci_test_version: 16,
    _count_(vendor_spec_info): 8,
    vendor_spec_info: 8[],
}

test GetDeviceInfoRsp {
    "\x02\x08\x00\x0b\x01\x01\x00\x02\x00\x03\x00\x04\x00\x01\x0a",
}

packet GetCapsInfoCmd : CoreCommand (core_opcode = CORE_GET_CAPS_INFO) {
}

test GetCapsInfoCmd {
    "\x01\x0c\x00\x00",
}

struct TLV {
    t: 8,
    _count_(v): 8,
    v: 8[],
}

packet GetCapsInfoRsp : CoreResponse (core_opcode = CORE_GET_CAPS_INFO) {
    status: StatusCode,
    _count_(tlvs): 8,
    tlvs: TLV[],
}

test GetCapsInfoRsp {
    "\x02\x0c\x00\x05\x00\x01\x00\x01\x01",
}

struct DeviceConfigTLV {
    cfg_id: DeviceConfigId,
    _count_(v): 8,
    v: 8[],
}

packet SetConfigCmd : CoreCommand (core_opcode = CORE_SET_CONFIG) {
    _count_(tlvs): 8,
    tlvs: DeviceConfigTLV[],
}

test SetConfigCmd {
    "\x01\x10\x00\x03\x01\x01\x00",
}

struct DeviceConfigStatus {
    cfg_id: DeviceConfigId,
    status: StatusCode,
}

packet SetConfigRsp : CoreResponse (core_opcode = CORE_SET_CONFIG) {
    status: StatusCode,
    _count_(cfg_status): 8,
    cfg_status: DeviceConfigStatus[],
}

test SetConfigRsp {
    "\x02\x10\x00\x04\x01\x01\x01\x01",
}

packet GetConfigCmd : CoreCommand (core_opcode = CORE_GET_CONFIG) {
    _count_(cfg_id): 8,
    cfg_id: 8[], // DeviceConfigId (Infra does not allow array of enums)
}

test GetConfigCmd {
    "\x01\x14\x00\x02\x01\x01",
}

packet GetConfigRsp : CoreResponse (core_opcode = CORE_GET_CONFIG) {
    status: StatusCode,
    _count_(tlvs): 8,
    tlvs: DeviceConfigTLV[]
}

test GetConfigRsp {
    "\x02\x14\x00\x05\x01\x01\x00\x01\x01",
}

packet DeviceStatusNtf : CoreNotification (core_opcode = CORE_DEVICE_STATUS_NTF) {
    device_state: DeviceState,
}

test DeviceStatusNtf {
    "\x03\x04\x00\x01\x01",
}

packet DeviceResetCmd : CoreCommand (core_opcode = CORE_DEVICE_RESET) {
    reset_config: ResetConfig,
}

test DeviceResetCmd {
    "\x01\x00\x00\x01\x00",
}

packet DeviceResetRsp : CoreResponse (core_opcode = CORE_DEVICE_RESET) {
    status: StatusCode,
}

test DeviceResetRsp {
    "\x02\x00\x00\x01\x00",
}

packet GenericError : CoreNotification (core_opcode = CORE_GENERIC_ERROR_NTF) {
    status: StatusCode,
}

test GenericError {
    "\x03\x1c\x00\x01\x01",
}

packet SessionInitCmd : SessionCommand (session_opcode = SESSION_INIT) {
    session_id: 32,
    session_type: SessionType,
}

test SessionInitCmd {
    "\x11\x00\x00\x05\x01\x02\x03\x04\x01",
}

packet SessionInitRsp : SessionResponse (session_opcode = SESSION_INIT) {
    status: StatusCode,
}

test SessionInitRsp {
    "\x12\x00\x00\x01\x11",
}

packet SessionDeinitCmd : SessionCommand (session_opcode = SESSION_DEINIT) {
    session_id: 32,
}

test SessionDeinitCmd {
    "\x11\x04\x00\x04\x01\x02\x03\x04",
}

packet SessionDeinitRsp : SessionResponse (session_opcode = SESSION_DEINIT) {
    status: StatusCode,
}

test SessionDeinitRsp {
    "\x12\x04\x00\x01\x00",
}

packet SessionStatusNtf : SessionNotification (session_opcode = SESSION_STATUS_NTF) {
    session_id: 32,
    session_state: SessionState,
    reason_code: ReasonCode,
}

test SessionStatusNtf {
    "\x13\x08\x00\x06\x01\x02\x03\x04\x02\x21",
}

struct AppConfigTlv {
    cfg_id: AppConfigId,
    _count_(v): 8,
    v: 8[],
}

packet SessionSetAppConfigCmd : SessionCommand (session_opcode = SESSION_SET_APP_CONFIG) {
    session_id: 32,
    _count_(tlvs): 8,
    tlvs: AppConfigTlv[]
}

test SessionSetAppConfigCmd {
    "\x11\x0c\x00\x05\x01\x02\x03\x04\x00",
}

struct AppConfigStatus {
    cfg_id: AppConfigId,
    status: StatusCode,
}

packet SessionSetAppConfigRsp : SessionResponse (session_opcode = SESSION_SET_APP_CONFIG) {
    status: StatusCode,
    _count_(cfg_status): 8,
    cfg_status: AppConfigStatus[],
}

test SessionSetAppConfigRsp {
    "\x12\x0c\x00\x04\x01\x01\x01\x00",
}

packet SessionGetAppConfigCmd : SessionCommand (session_opcode = SESSION_GET_APP_CONFIG) {
    session_id: 32,
    _count_(app_cfg): 8,
    app_cfg: 8[], // AppConfigId (Infra does not allow array of enums)
}

test SessionGetAppConfigCmd {
    "\x11\x10\x00\x05\x01\x02\x03\x04\x00",
}

packet SessionGetAppConfigRsp : SessionResponse (session_opcode = SESSION_GET_APP_CONFIG) {
    status: StatusCode,
    _count_(tlvs): 8,
    tlvs: AppConfigTlv[],
}

test SessionGetAppConfigRsp {
    "\x12\x10\x00\x02\x01\x00",
}

packet SessionGetStateCmd : SessionCommand (session_opcode = SESSION_GET_STATE) {
    session_id: 32,
}

test SessionGetStateCmd {
    "\x11\x18\x00\x04\x00\x01\x02\x03",
}

packet SessionGetStateRsp : SessionResponse (session_opcode = SESSION_GET_STATE) {
    status: StatusCode,
    session_state: SessionState,
}

test SessionGetStateRsp {
    "\x12\x18\x00\x02\x00\x01",
}

packet RangeStartCmd : RangingCommand (ranging_opcode = RANGE_START) {
    session_id: 32,
}

test RangeStartCmd {
    "\x21\x00\x00\x04\x00\x01\x02\x03",
}

packet RangeStartRsp : RangingResponse (ranging_opcode = RANGE_START) {
    status: StatusCode,
}

test RangeStartRsp {
    "\x22\x00\x00\x01\x00",
}

struct ShortAddressTwoWayRangingMeasurement {
    mac_address: 16,
    status: StatusCode,
    nlos: 8,
    distance: 16,
    aoa_azimuth: 16,
    aoa_azimuth_fom: 8,
    aoa_elevation: 16,
    aoa_elevation_fom: 8,
    aoa_destination_azimuth: 16,
    aoa_destination_azimuth_fom: 8,
    aoa_destination_elevation: 16,
    aoa_destination_elevation_fom: 8,
    slot_index: 8,
    _reserved_: 96,
}

struct ExtendedAddressTwoWayRangingMeasurement {
    mac_address: 64,
    status: StatusCode,
    nlos: 8,
    distance: 16,
    aoa_azimuth: 16,
    aoa_azimuth_fom: 8,
    aoa_elevation: 16,
    aoa_elevation_fom: 8,
    aoa_destination_azimuth: 16,
    aoa_destination_azimuth_fom: 8,
    aoa_destination_elevation: 16,
    aoa_destination_elevation_fom: 8,
    slot_index: 8,
    _reserved_: 48,
}

packet RangeDataNtf : RangingNotification (ranging_opcode = RANGE_START) {
    sequence_number: 32,
    session_id: 32,
    _reserved_: 8,
    current_ranging_interval: 32,
    ranging_mesurement_type: 8,
    _reserved_: 8,
    mac_address_indicator: MacAddressIndicator,
    _reserved_: 64,
    _payload_,
}

packet ShortMACRangeDataNtf : RangeDataNtf (mac_address_indicator = SHORT_ADDRESS) {
    _count_(two_way_ranging_measurements) : 8,
    two_way_ranging_measurements : ShortAddressTwoWayRangingMeasurement[],
}

test ShortMACRangeDataNtf {
    "\x23\x00\x00\x19\x00\x02\x03\x04\x05\x06\x07\x08\x00\x0a\x0b\x0c\x0d\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
}

packet ExtendedMACRangeDataNtf : RangeDataNtf (mac_address_indicator = EXTENDED_ADDRESS) {
    _count_(two_way_ranging_measurements) : 8,
    two_way_ranging_measurements : ExtendedAddressTwoWayRangingMeasurement[],
}

test ExtendedMACRangeDataNtf {
    "\x23\x00\x00\x19\x00\x02\x03\x04\x05\x06\x07\x08\x00\x0a\x0b\x0c\x0d\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
}


packet RangeStopCmd : RangingCommand (ranging_opcode = RANGE_STOP) {
    session_id: 32,
}

test RangeStopCmd {
    "\x21\x04\x00\x04\x00\x02\x03\x04",
}

packet RangeStopRsp : RangingResponse (ranging_opcode = RANGE_STOP) {
    status: StatusCode,
}

test RangeStopRsp {
    "\x22\x04\x00\x01\x00",
}

packet RangeGetRangingCountCmd : RangingCommand (ranging_opcode = RANGE_GET_RANGING_COUNT) {
    session_id: 32,
}

test RangeGetRangingCountCmd {
    "\x21\x0c\x00\x04\x00\x02\x03\x04",
}

packet RangeGetRangingCountRsp : RangingResponse (ranging_opcode = RANGE_GET_RANGING_COUNT) {
    status: StatusCode,
    count: 32,
}

test RangeGetRangingCountRsp {
    "\x22\x0c\x00\x05\x00\x02\x03\x04\x05",
}

packet SessionGetCountCmd : SessionCommand (session_opcode = SESSION_GET_COUNT) {
}

test SessionGetCountCmd {
    "\x11\x14\x00\x00",
}

packet SessionGetCountRsp : SessionResponse (session_opcode = SESSION_GET_COUNT) {
    status: StatusCode,
    session_count: 8,
}

test SessionGetCountRsp {
    "\x12\x14\x00\x02\x00\x01",
}

struct Controlee {
    short_address: 16,
    subsession_id: 32,
}

packet SessionUpdateControllerMulticastListCmd : SessionCommand (session_opcode = SESSION_UPDATE_CONTROLLER_MULTICAST_LIST) {
    session_id: 32,
    action: 8,
    _count_(controlees): 8,
    controlees: Controlee[],
}

test SessionUpdateControllerMulticastListCmd {
    "\x11\x1c\x00\x06\x00\x01\x02\x03\x04\x00",
}

packet SessionUpdateControllerMulticastListRsp : SessionResponse (session_opcode = SESSION_UPDATE_CONTROLLER_MULTICAST_LIST) {
    status: StatusCode,
}

test SessionUpdateControllerMulticastListRsp {
    "\x12\x1c\x00\x01\x00",
}

struct ControleeStatus {
    mac_address: 16,
    subsession_id: 32,
    status: 8,
}

packet SessionUpdateControllerMulticastListNtf : SessionNotification (session_opcode = SESSION_UPDATE_CONTROLLER_MULTICAST_LIST) {
    session_id: 32,
    remaining_multicast_list_size: 8,
    _count_(controlee_status): 8,
    controlee_status: ControleeStatus[],
}

test SessionUpdateControllerMulticastListNtf {
    "\x13\x1c\x00\x06\x00\x01\x02\x03\x04\x00",
}

packet AndroidSetCountryCodeCmd: AndroidCommand (android_opcode = ANDROID_SET_COUNTRY_CODE) {
    country_code : 8[2],
}

// Set country code to US.
test AndroidSetCountryCodeCmd {
    "\xe1\x04\x00\x02\x55\x53",
}

packet AndroidSetCountryCodeRsp : AndroidResponse (android_opcode = ANDROID_SET_COUNTRY_CODE) {
    status: StatusCode,
}

test AndroidSetCountryCodeRsp {
    "\xe2\x04\x00\x01\x00",
}
